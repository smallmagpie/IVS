예제 각각 실행 시키고 현업에서 더 많이 사용하는 VS code 이용

2.1 
형변환에는 묵시적형변환으로 생략되서 형변환 되는 경우와 명시적형변환인 C의 경우 (double) 변수 형태 Pyhthon의 경우 double (변수) 형태

산술 연산자 + - * / % 이용

파이선에는 // 연산자가 있는데 나누기에서 몫의 정수값만 받기 위함
-> C와 Java에는 다른 형태로 정수값만 받을 수 있음

EUC-KR 예전에 한글 저장하던 방식
UTF

//rand() : 0~32767 난수 발생 함수
-> <stdlib.h> 라이브러리에 포함

rand 난수의 경우 컴퓨터의 난수를 가져와 같은 패턴을 그림
-> 랜덤한 난수를 위해 난수 발생 초기화가 필요함
srand((unsigned int)time(NULL)); : 난수 초기화
-> <time.h> 라이브러리 필요

printf("%d\n",rand()%100);//1~99 사이의 난수 발생
-> 확률의 형편성이 떨어질 것 같음

증감연산자 ++n 현재단에서 + 실행
증감연산자 n++ 다음단에서 + 실행

비교연산자 : < <= > >= == !=
삼항연산자 : (조건) ? (조건이 참 일 때의 값) : (조건이 거짓 일 때의 값)

#include <stdbool.h>을 통해 true false 를 끌어냄

result ? "참" : "거짓" 삼항연산

논리연산자 : &&(and), ||(or), !(not)

and 연산 수행시 앞 항이 참이 아니면 뒤를 시행 하지 않음
or 연산 수행 시 앞 항이 참이면 뒤를 시행하지 않음 -> 증감연산을 통해 확인함

비트연산자 : &(and), |(or), ^(XOR; 같으면 0, 다르면 1) 출력값은 0 혹은 1
<< 시프트 시 두 배가됨
>> 시프트 시  반이 됨

대입연산자 : =, +=, -=, /=, *=, %= ...
n1 += n1 + 10
n1 -= n1 - 10

for(특정횟수 반복), while(조건만족시 반복), do ~ while(1회수행후 조건만족시 반복)

for(int i=1; i<10;i++)  (for문 형태)

 while(i<=10){
        printf("%d hello world!!\n",i++); (while문 형태)
    }

do{
        printf("%d hello world!!\n",i++);
    }while(i<=10); (do ~ while 문 형태) 
->무조건 한번은 실행


break; 반복문 탈출
continue;  이번 반복을 중단하고 다음 반복으로 넘어감

반복문을 이중으로 넣어 이중 반복문 가능
